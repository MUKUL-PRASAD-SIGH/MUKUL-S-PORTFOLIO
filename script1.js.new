// Neural Network Animation
const createNeuralNetwork = () => {
    const container = document.querySelector('.neural-network');
    if (!container) return;
    
    // Create nodes
    for (let i = 0; i < 15; i++) {
        const node = document.createElement('div');
        node.className = 'neural-node';
        node.style.left = `${Math.random() * 100}%`;
        node.style.top = `${Math.random() * 100}%`;
        node.style.animationDelay = `${Math.random() * 2}s`;
        container.appendChild(node);
    }
    
    // Create connections
    const nodes = document.querySelectorAll('.neural-node');
    nodes.forEach(node1 => {
        nodes.forEach(node2 => {
            if (Math.random() > 0.7) {
                const line = document.createElement('div');
                line.className = 'neural-connection';
                container.appendChild(line);
                
                const updateLine = () => {
                    const rect1 = node1.getBoundingClientRect();
                    const rect2 = node2.getBoundingClientRect();
                    const containerRect = container.getBoundingClientRect();
                    
                    const x1 = rect1.left + rect1.width/2 - containerRect.left + window.scrollX;
                    const y1 = rect1.top + rect1.height/2 - containerRect.top + window.scrollY;
                    const x2 = rect2.left + rect2.width/2 - containerRect.left + window.scrollX;
                    const y2 = rect2.top + rect2.height/2 - containerRect.top + window.scrollY;
                    
                    const length = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
                    const angle = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;
                        
                    line.style.width = `${length}px`;
                    line.style.left = `${x1}px`;
                    line.style.top = `${y1}px`;
                    line.style.transform = `rotate(${angle}deg)`;
                    line.style.opacity = 0.1 + Math.random() * 0.2;
                };
                
                window.addEventListener('resize', updateLine);
                updateLine();
            }
        });
    });
};

// Initialize neural network when DOM is fully loaded
document.addEventListener('DOMContentLoaded', () => {
    createNeuralNetwork();
});
